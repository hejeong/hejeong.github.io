---
layout: post
title:      "No Friends? Play Against the Computer! (Tic-Tac-Toe)"
date:       2018-07-24 14:48:22 +0000
permalink:  no_friends_play_against_the_computer_tic-tac-toe
---


Yesterday, I was optimizing the game of Tic-Tac-Toe to work with AI, meaning I was extending my previous version of Tic-Tac-Toe to allow 3 game modes: 0-player (computer vs. computer), 1-player (human vs. computer), and 2-player (human vs. human). Building the game itself wasn't hard; all you have to do is make sure the game takes an input, checks to see whose turn it is, and make sure to check to see who wins or if it's a draw (there's even more to it, but the gist of it is that it isn't too complicated). The difficult part is developing the game to include computer players.

The human player is easy. The human does all of the thinking, "Where's the next best move?" and as the programmer, we only have to ask for the human's next move, and we take that position and fill it with their token "X" or "Y". We don't have to think whether the move is good or not, we just have to execute the game the way the human wants to play it. However, it's different for the computer player. The computer player will have a bunch of different places it can play, but there will most likely be the "best" or a "better" move. 

There's probably many different ways to solve this puzzle, but I began by prioritizing a block or win. Meaning, I checked through all possible winning combinations, and if any of them contained 2 of the same characters in a row, with the last spot blank, then the computer's best move is to play there. This means I will block the other person from winning, or I will win. The next on the priority queue is making the best beginning moves. Typically, the middle or the corners are the best places to move on the first move. If the opponent plays in the corner on the first turn, the best response is to play in the middle. So for the first two turns, I felt like prioritizing the middle because it plays an important part. If the first player plays in the middle on the first turn, then the best move is to respond in one of the corners. I wanted to keep the game full of variation or unpredictability, so I took the four corners, and made the computer randomly pick one of the four corners. Then, if those conditions are not met, then my next best move is to make myself in a winnable situation, create two in a row. So same thing, I went through the winnable combinations, and if there is only one token of the current player's kind and two empty spaces, then maybe I would want to play in one of those two spots, at random. Last but not least, there will be a point in the game when no one can win, but you still have to fill the board. So at that point, you just randomly play anywhere. 

But yes, I have created a Tic-Tac-Toe game that can play on its own, and it was quite fun to do so. They say that a computer Tic-Tac-Toe game that is coded really well will always end in a draw. I tried playing through my game a couple of times and so far so good. I love it. If you want to try the game out for yourself, let me know; I'd love to show you!
